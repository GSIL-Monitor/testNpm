'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createEagerElement = require('recompose/createEagerElement');

var _createEagerElement2 = _interopRequireDefault(_createEagerElement);

var _createHelper = require('recompose/createHelper');

var _createHelper2 = _interopRequireDefault(_createHelper);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var getScroll = function getScroll() {
  return {
    x: window.pageXOffset,
    y: window.pageYOffset
  };
};

var mapPropsOnScroll = function mapPropsOnScroll(propsMapper, throttle) {
  return function (BaseComponent) {
    return function (_React$Component) {
      _inherits(_class2, _React$Component);

      function _class2() {
        var _Object$getPrototypeO;

        var _temp, _this, _ret;

        _classCallCheck(this, _class2);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(_class2)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.scroll = {}, _this.componentDidMount = function () {
          _this.scroll = getScroll();
          window.addEventListener('scroll', _this.mapProps);
        }, _this.componentWillUnmount = function () {
          if ((0, _isFunction2.default)(_this.mapProps.cancel)) {
            _this.mapProps.cancel();
          }

          window.removeEventListener('scroll', _this.mapProps);
        }, _this.mapProps = throttle(function () {
          // Remind: fix for safari over scrolling problem
          var maxY = document.body.offsetHeight - window.innerHeight;
          if (getScroll().y < 0 || getScroll().y > maxY) return;

          _this.setState(propsMapper(getScroll(), _this.scroll));
          _this.scroll = getScroll();
        }), _this.render = function () {
          return (0, _createEagerElement2.default)(BaseComponent, _extends({}, _this.props, _this.state));
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }

      return _class2;
    }(_react2.default.Component);
  };
};

exports.default = (0, _createHelper2.default)(mapPropsOnScroll, 'mapPropsOnScroll');